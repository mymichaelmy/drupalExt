<?php

/**
 * @file
 * This is the module file for automateimport.
 *
 * All hooks are implemented in this file only.
 */

/**
 * Implements hook_help().
 */
function automateimport_help($path, $arg) {
  switch ($path) {
    case 'admin/help#automateimport':
      // Construct the path of this module's readme file.
      $path_readme = drupal_get_path('module', 'automateimport') . '/README.txt';

      // If the readme is available, return the contents.
      if (file_exists($path_readme)) {
        $readme = file_get_contents($path_readme);

        return '<h1>README.txt</h1><pre>' . check_plain($readme) . '</pre>';
      }
  }
}

/**
 * Implements hook_permission().
 */
function automateimport_permission() {
  return array(
    'automateimport' => array(
      'description' => t('This permission allow a user to upload packed files & assets to server and extract them to a specified directory.'),
      'title' => t('Use Automate Import'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function automateimport_menu() {
  $items['admin/config/automate-import'] = array(
    'title' => 'Automate Import',
    'description' => 'Pack your media & assets, upload them and extract to a specified directory.',
    'access arguments' => array('automateimport'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('automateimport_settings_form'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/automate-import/settings'] = array(
    'title' => 'Settings',
    'description' => 'Setup directory name for extraction of media & assets pack. ',
    'access arguments' => array('automateimport'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('automateimport_settings_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/automate-import/bulk-media-upload'] = array(
    'title' => 'Upload bulk media',
    'description' => 'Upload bulk media to a directory.',
    'access arguments' => array('automateimport'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('automateimport_media_upload_form'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Form constructor for the automateimport media form.
 *
 * @ingroup forms
 */
function automateimport_media_upload_form() {
  $form = array();

  $form['panel'] = array(
    '#title' => t('Bulk Media Uploader'),
    '#type' => 'fieldset',
  );

  $form['panel']['file'] = array(
    '#title' => t('Upload file'),
    '#type' => 'file',
    '#description' => t('Create package of .export files and upload to Drupal. Valid extensions are .zip, .tar.gz, .tar. All files will be extracted to !directory', array('!directory' => file_build_uri(variable_get('automateimport_bulk_media_path')))),
  );

  $form['panel']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function automateimport_media_upload_form_submit($form, $form_state) {
  $file = file_save_upload('file', array(
    'file_validate_extensions' => array('zip tar tar.gz'),
    )
  );
  
  // Created a directory if not available.
  if (!is_dir(variable_get('automateimport_bulk_media_path'))) {
    drupal_mkdir(variable_get('automateimport_bulk_media_path'), variable_get('file_chmod_directory', 0755));
  }
  // Creating a streamwrapper URI.
  $uri = variable_get('automateimport_bulk_media_path');
  if ($file) {
    if ($file = file_move($file, $uri, FILE_EXISTS_RENAME)) {
      $form_state['values']['file'] = $file;
      $realpath = drupal_realpath($file->uri);
      $zip = new ZipArchive();
      $zip->open($realpath);
      $result = @$zip->extractTo(drupal_realpath($uri));
      try{
      if ($result === TRUE) {
        //drupal_set_message(t('All media have been extracted to %path', array('%path' => drupal_realpath($uri))));
       
        //$originalpath = drupal_realpath($uri);
       // $originalpath = file_create_url($uri);
        //$originalpath = file_stream_wrapper_get_instance_by_uri($uri);
        //$originalpath->realpath();
        $folder = str_replace('public://', '', $uri);
        //drupal_set_message($folder);
        $originalpath = DRUPAL_ROOT.'/'.'sites'.'/'.'default'.'/'.'files'.'/'.$folder;
        //drupal_set_message($originalpath);
        $bulkFolder = $originalpath.'/*'.'{jpg,png,gif,export}';
        $exportFiles = glob($bulkFolder, GLOB_BRACE);
        //drupal_set_message('export files are');
            foreach($exportFiles as $exportFile)
            {
                //drupal_set_message($exportFile);
                $codeFile = file_get_contents($exportFile);
                node_export_import($codeFile, $msg_t = 't', $save = TRUE);
                drupal_unlink($exportFile, $context = NULL);
            }
      }
      else {
        watchdog('error', 'There is some problem related to extraction of the file. Please upload and try again.', array(), WATCHDOG_ERROR, NULL);
        drupal_set_message(t('There is some problem related to extraction of the file. Please upload and try again.'), 'error', FALSE);
      }
      $zip->close();
      $zipFolder = $originalpath.'/*'.'{jpg,png,gif,export,zip}';
      $zipFiles = glob($zipFolder, GLOB_BRACE);
      //drupal_set_message('zip file is');
      foreach($zipFiles as $zipFile) {
        //drupal_set_message($zipFile);
        $getFileName = basename($zipFile);
        $zipPath = $uri . '/' . $getFileName;
        $fid = db_query("SELECT fid FROM {file_managed} WHERE uri = :path", array(':path' => $zipPath))->fetchField();
        drupal_set_message($fid);
        if ($fid) {
                    $loadedfile = file_load($fid);
                    file_delete($loadedfile);
        }
         else {
                    file_unmanaged_delete($zipPath);
        }
      }
      drupal_set_message("All Media files have been imported");
      }
      catch (Exception $e)
      {
          drupal_set_message("Exception ");
          drupal_set_message($e);
      }
    }
    else {
      form_set_error('file', t("Failed to write the uploaded file the file folder."));
    }  
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}

/**
 * Form constructor for the automateimport settings form.
 *
 * @ingroup forms
 */
function automateimport_settings_form() {

  $form['panel'] = array(
    '#title' => t('Bulk Media Uploader'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
  );

  $form['panel']['automateimport_bulk_media_path'] = array(
    '#title' => t('Bulk Media Extraction Path'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#description' => t('Path to media directory from content feeder would upload media to nodes. Example: public://bulk_media'),
    '#default_value' => variable_get('automateimport_bulk_media_path', 'bulk_media'),
    '#after_build' => array('system_check_directory'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_file_validate().
 */
function automateimport_file_validate($file) {
  $errors = array();
  $result = db_query('SELECT f.fid FROM {file_managed} f WHERE f.uri = :uri', array(':uri' => $file->destination));
  $output = $result->fetchObject();
  if (is_object($output)) {
    $errors[] = t("A file already exist with the same name. Please try uploading by renaming this file.");
  }
  return $errors;
}
